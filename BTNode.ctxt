#BlueJ class context
comment0.target=BTNode
comment1.params=initialData\ initialLeft\ initialRight
comment1.target=BTNode(java.lang.Object,\ BTNode,\ BTNode)
comment1.text=\n\ Initialize\ a\ <CODE>BTNode</CODE>\ with\ a\ specified\ initial\ data\ and\ links\n\ children.\ Note\ that\ a\ child\ link\ may\ be\ the\ null\ reference,\ \n\ which\ indicates\ that\ the\ new\ node\ does\ not\ have\ that\ child.\n\ @param\ <CODE>initialData</CODE>\n\ \ \ the\ initial\ data\ of\ this\ new\ node\n\ @param\ <CODE>initialLeft</CODE>\n\ \ \ a\ reference\ to\ the\ left\ child\ of\ this\ new\ node--this\ reference\ may\ be\ null\n\ \ \ to\ indicate\ that\ there\ is\ no\ node\ after\ this\ new\ node.\n\ @param\ <CODE>initialRight</CODE>\n\ \ \ a\ reference\ to\ the\ right\ child\ of\ this\ new\ node--this\ reference\ may\ be\ null\n\ \ \ to\ indicate\ that\ there\ is\ no\ node\ after\ this\ new\ node.\n\ <dt><b>Postcondition\:</b><dd>\n\ \ \ This\ node\ contains\ the\ specified\ data\ and\ links\ to\ its\ children.\n
comment10.params=
comment10.target=void\ postorderPrint()
comment10.text=\n\ Uses\ a\ postorder\ traversal\ to\ print\ the\ data\ from\ each\ node\ at\ or\ below\n\ this\ node\ of\ the\ binary\ tree.\n\ @param\ -\ none\n\ <dt><b>Postcondition\:</b><dd>\n\ \ \ The\ data\ of\ this\ node\ and\ all\ its\ descendants\ have\ been\ writeen\ by\n\ \ \ <CODE>System.out.println(\ )</CODE>\ using\ a\ postorder\ traversal.\n
comment11.params=depth
comment11.target=void\ print(int)
comment11.text=\n\ Uses\ an\ inorder\ traversal\ to\ print\ the\ data\ from\ each\ node\ at\ or\ below\n\ this\ node\ of\ the\ binary\ tree,\ with\ indentations\ to\ indicate\ the\ depth\n\ of\ each\ node.\n\ @param\ <CODE>depth</CODE>\n\ \ \ the\ depth\ of\ this\ node\ (with\ 0\ for\ root,\ 1\ for\ the\ root's\n\ \ \ children,\ and\ so\ on)(\n\ <dt><b>Precondition\:</b><dd>\n\ \ \ <CODE>depth</CODE>\ is\ the\ depth\ of\ this\ node.\n\ <dt><b>Postcondition\:</b><dd>\n\ \ \ The\ data\ of\ this\ node\ and\ all\ its\ descendants\ have\ been\ writeen\ by\n\ \ \ <CODE>System.out.println(\ )</CODE>\ using\ an\ inorder\ traversal.\n\ \ \ The\ indentation\ of\ each\ line\ of\ data\ is\ four\ times\ its\ depth\ in\ the\n\ \ \ tree.\ A\ dash\ "--"\ is\ printed\ at\ any\ place\ where\ a\ child\ has\ no\n\ \ \ sibling.\n
comment12.params=
comment12.target=BTNode\ removeLeftmost()
comment12.text=\n\ Remove\ the\ leftmost\ most\ node\ of\ the\ tree\ with\ this\ node\ as\ its\ root.\n\ @param\ -\ none\n\ <dt><b>Postcondition\:</b><dd>\n\ \ \ The\ tree\ starting\ at\ this\ node\ has\ had\ its\ leftmost\ node\ removed\ (i.e.,\n\ \ \ the\ deepest\ node\ that\ can\ be\ reached\ by\ following\ left\ links).\ The\n\ \ \ return\ value\ is\ a\ reference\ to\ the\ root\ of\ the\ new\ (smaller)\ tree.\n\ \ \ This\ return\ value\ could\ be\ null\ if\ the\ original\ tree\ had\ only\ one\n\ \ \ node\ (since\ that\ one\ node\ has\ now\ been\ removed).\n
comment13.params=
comment13.target=BTNode\ removeRightmost()
comment13.text=\n\ Remove\ the\ rightmost\ most\ node\ of\ the\ tree\ with\ this\ node\ as\ its\ root.\n\ @param\ -\ none\n\ <dt><b>Postcondition\:</b><dd>\n\ \ \ The\ tree\ starting\ at\ this\ node\ has\ had\ its\ rightmost\ node\ removed\ (i.e.,\n\ \ \ the\ deepest\ node\ that\ can\ be\ reached\ by\ following\ right\ links).\ The\n\ \ \ return\ value\ is\ a\ reference\ to\ the\ root\ of\ the\ new\ (smaller)\ tree.\n\ \ \ This\ return\ value\ could\ be\ null\ if\ the\ original\ tree\ had\ only\ one\n\ \ \ node\ (since\ that\ one\ node\ has\ now\ been\ removed).\n
comment14.params=newData
comment14.target=void\ setData(java.lang.Object)
comment14.text=\n\ Modification\ method\ to\ set\ the\ data\ in\ this\ node.\ \ \ \n\ @param\ <CODE>newData</CODE>\n\ \ \ the\ new\ data\ to\ place\ in\ this\ node\n\ <dt><b>Postcondition\:</b><dd>\n\ \ \ The\ data\ of\ this\ node\ has\ been\ set\ to\ <CODE>newData</CODE>.\n
comment15.params=newLeft
comment15.target=void\ setLeft(BTNode)
comment15.text=\n\ Modification\ method\ to\ set\ the\ link\ to\ the\ left\ child\ of\ this\ node.\n\ @param\ <CODE>newLeft</CODE>\n\ \ \ a\ reference\ to\ the\ node\ that\ should\ appear\ as\ the\ left\ child\ of\ this\ node\n\ \ (or\ the\ null\ reference\ if\ there\ is\ no\ left\ child\ for\ this\ node)\n\ <dt><b>Postcondition\:</b><dd>\n\ \ \ The\ link\ to\ the\ left\ child\ of\ this\ node\ has\ been\ set\ to\ <CODE>newLeft</CODE>.\n\ \ \ Any\ other\ node\ (that\ used\ to\ be\ the\ left\ child)\ is\ no\ longer\ connected\ to\n\ \ \ this\ node.\n
comment16.params=newRight
comment16.target=void\ setRight(BTNode)
comment16.text=\n\ Modification\ method\ to\ set\ the\ link\ to\ the\ right\ child\ of\ this\ node.\n\ @param\ <CODE>newLeft</CODE>\n\ \ \ a\ reference\ to\ the\ node\ that\ should\ appear\ as\ the\ right\ child\ of\ this\ node\n\ \ (or\ the\ null\ reference\ if\ there\ is\ no\ right\ child\ for\ this\ node)\n\ <dt><b>Postcondition\:</b><dd>\n\ \ \ The\ link\ to\ the\ right\ child\ of\ this\ node\ has\ been\ set\ to\ <CODE>newRight</CODE>.\n\ \ \ Any\ other\ node\ (that\ used\ to\ be\ the\ right\ child)\ is\ no\ longer\ connected\ to\n\ \ \ this\ node.\n
comment17.params=source
comment17.target=BTNode\ treeCopy(BTNode)
comment17.text=\n\ Copy\ a\ binary\ tree.\n\ @param\ <CODE>source</CODE>\n\ \ \ a\ reference\ to\ the\ root\ of\ a\ binary\ tree\ that\ will\ be\ copied\ (which\ may\ be\n\ \ \ an\ empty\ tree\ where\ <CODE>source</CODE>\ is\ null)\n\ @return\n\ \ \ The\ method\ has\ made\ a\ copy\ of\ the\ binary\ tree\ starting\ at\ \n\ \ \ <CODE>source</CODE>.\ The\ return\ value\ is\ a\ reference\ to\ the\ root\ of\ the\ copy.\ \n\ @exception\ OutOfMemoryError\n\ \ \ Indicates\ that\ there\ is\ insufficient\ memory\ for\ the\ new\ tree.\ \ \ \n
comment18.params=root
comment18.target=long\ treeSize(BTNode)
comment18.text=\n\ Count\ the\ number\ of\ nodes\ in\ a\ binary\ tree.\n\ @param\ <CODE>root</CODE>\n\ \ \ a\ reference\ to\ the\ root\ of\ a\ binary\ tree\ (which\ may\ be\n\ \ \ an\ empty\ tree\ where\ <CODE>source</CODE>\ is\ null)\n\ @return\n\ \ \ the\ number\ of\ nodes\ in\ the\ binary\ tree\ \ \n\ <dt><b>Note\:</b><dd>\n\ \ \ A\ wrong\ answer\ occurs\ for\ trees\ larger\ than\ \n\ \ \ <CODE>INT.MAX_VALUE</CODE>.\ \ \ \ \n
comment2.params=
comment2.target=java.lang.Object\ getData()
comment2.text=\n\ Accessor\ method\ to\ get\ the\ data\ from\ this\ node.\ \ \ \n\ @param\ -\ none\n\ @return\n\ \ \ the\ data\ from\ this\ node\n
comment3.params=
comment3.target=BTNode\ getLeft()
comment3.text=\n\ Accessor\ method\ to\ get\ a\ reference\ to\ the\ left\ child\ of\ this\ node.\ \n\ @param\ -\ none\n\ @return\n\ \ \ a\ reference\ to\ the\ left\ child\ of\ this\ node\ (or\ the\ null\ reference\ if\ there\n\ \ \ is\ no\ left\ child)\n
comment4.params=
comment4.target=java.lang.Object\ getLeftmostData()
comment4.text=\n\ Accessor\ method\ to\ get\ the\ data\ from\ the\ leftmost\ node\ of\ the\ tree\ below\ \n\ this\ node.\n\ @param\ -\ none\n\ @return\n\ \ \ the\ data\ from\ the\ deepest\ node\ that\ can\ be\ reached\ from\ this\ node\ by\n\ \ \ following\ left\ links.\n
comment5.params=
comment5.target=BTNode\ getRight()
comment5.text=\n\ Accessor\ method\ to\ get\ a\ reference\ to\ the\ right\ child\ of\ this\ node.\ \n\ @param\ -\ none\n\ @return\n\ \ \ a\ reference\ to\ the\ right\ child\ of\ this\ node\ (or\ the\ null\ reference\ if\ there\n\ \ \ is\ no\ right\ child)\n
comment6.params=
comment6.target=java.lang.Object\ getRightmostData()
comment6.text=\n\ Accessor\ method\ to\ get\ the\ data\ from\ the\ rightmost\ node\ of\ the\ tree\ below\ \n\ this\ node.\n\ @param\ -\ none\n\ @return\n\ \ \ the\ data\ from\ the\ deepest\ node\ that\ can\ be\ reached\ from\ this\ node\ by\n\ \ \ following\ right\ links.\n
comment7.params=
comment7.target=void\ inorderPrint()
comment7.text=\n\ Uses\ an\ inorder\ traversal\ to\ print\ the\ data\ from\ each\ node\ at\ or\ below\n\ this\ node\ of\ the\ binary\ tree.\n\ @param\ -\ none\n\ <dt><b>Postcondition\:</b><dd>\n\ \ \ The\ data\ of\ this\ node\ and\ all\ its\ descendants\ have\ been\ writeen\ by\n\ \ \ <CODE>System.out.println(\ )</CODE>\ using\ an\ inorder\ traversal.\n
comment8.params=
comment8.target=boolean\ isLeaf()
comment8.text=\n\ Accessor\ method\ to\ determine\ whether\ a\ node\ is\ a\ leaf.\ \n\ @param\ -\ none\n\ @return\n\ \ \ <CODE>true</CODE>\ (if\ this\ node\ is\ a\ leaf)\ or\ \n\ \ \ <CODE>false</CODE>\ (if\ this\ node\ is\ not\ a\ leaf.\n
comment9.params=
comment9.target=void\ preorderPrint()
comment9.text=\n\ Uses\ a\ preorder\ traversal\ to\ print\ the\ data\ from\ each\ node\ at\ or\ below\n\ this\ node\ of\ the\ binary\ tree.\n\ @param\ -\ none\n\ <dt><b>Postcondition\:</b><dd>\n\ \ \ The\ data\ of\ this\ node\ and\ all\ its\ descendants\ have\ been\ writeen\ by\n\ \ \ <CODE>System.out.println(\ )</CODE>\ using\ a\ preorder\ traversal.\n
numComments=19
